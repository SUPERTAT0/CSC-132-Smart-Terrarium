import tkinter as tk
from tkinter import ttk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
# check = 0

x_data = [1, 2, 3, 4, 5]
humid_y = [2, 3, 3, 4, 8]
set_humid = [5, 5, 5, 5, 5]
light_y = [3, 5, 6, 2, 6]
set_light = [4, 4, 4, 4, 4]
temp_y = [8, 6, 7, 6, 3]
set_temp = [6, 6, 6, 6, 6]
moist_y = [5, 4, 5, 8, 1]
set_moist = [7, 7, 7, 7, 7]
y_data1 = [2, 4, 6, 8, 10]
y_data2 = [1, 3, 5, 7, 9]

# Create the main window
root = tk.Tk()
root.title("Graph and Message Board For Plant")

# Create a frame for the graph
graph_frame = ttk.Frame(root)
graph_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

# Create a figure and axis for the graph
fig = Figure(figsize=(5, 4), dpi=100)
ax = fig.add_subplot(111)
ax.set_xlabel("X-axis")
ax.set_ylabel("Y-axis")
ax.set_xlim(0, 10)
ax.set_ylim(0, 10)

# Create a canvas to display the graph
canvas = FigureCanvasTkAgg(fig, master=graph_frame)
canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)

# Create a frame for the message board
msg_frame = ttk.Frame(root)
msg_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

# Create a label for the message board
msg_label = ttk.Label(msg_frame, text="Messages:")
msg_label.pack(side=tk.TOP, padx=10, pady=10)

# Create a text box to display messages
msg_text = tk.Text(msg_frame, height=20, width=30)
msg_text.pack(side=tk.TOP, padx=10, pady=10)

# Create a button to update the graph
def set_graph(y, set_y):
    global y_data1, y_data2
    # Update the data for the second line on the graph
    # if check:
    #     check=0
    #     x_data2 = [1, 2, 3, 4, 5]
    #     y_data2 = [1, 3, 5, 7, 9]
    # else:
    #     check=1
    #     x_data2 = [1, 2, 3, 4, 5]
    #     y_data2 = [0, 2, 4, 6, 8]
    y_data1 = set_y
    y_data2 = y

    ax.clear()
    
    # Update the graph with the new data
    ax.plot(x_data, y_data1)
    ax.plot(x_data, y_data2)
    canvas.draw()
    # Update the message board with a new message
    msg_text.insert(tk.END, "Graph updated\n")

# Create a button to update the data and redraw the graph
update_button1 = ttk.Button(root, text="Show Temperature", command=lambda: [set_graph(temp_y,set_temp)])
update_button1.pack(side=tk.BOTTOM, pady=5)

update_button2 = ttk.Button(root, text="Show Humidity", command=lambda: [set_graph(humid_y,set_humid)])
update_button2.pack(side=tk.BOTTOM, pady=5)

update_button3 = ttk.Button(root, text="Show Soil Moisture", command=lambda: [msg_text.insert(tk.END, "Plant has sufficient water as of now\n")])
update_button3.pack(side=tk.BOTTOM, pady=5)

# update_button4 = ttk.Button(root, text="Show Light Levels", command=lambda: [set_graph(light_y,set_light)])
# update_button4.pack(side=tk.BOTTOM, pady=5)

# Create a function to update the graph with new data
def update_graph():
    # Get new data from a data source
    
    # Clear the previous data from the graph
    ax.clear()
    
    # Update the graph with the new data
    ax.plot(x_data, y_data1)
    ax.plot(x_data, y_data2)
    canvas.draw()

    # Update the message board with a new message
    msg_text.insert(tk.END, "Plant needs no care as of now\n")

    # Call this function again after 1 second
    root.after(10000, update_graph)

# Start updating the graph
update_graph()

# Start the main loop
root.mainloop()

################################################################################
################################################################################

##### THIS IS THE TEMP/HUMIDITY SENSOR AND LIGHTS #####

import time
from time import sleep
import adafruit_dht
import board
import RPi.GPIO as GPIO

RED_PIN=25
BLUE_PIN=26
GREEN_PIN=24
GPIO.setmode(GPIO.BCM)
GPIO.setup(GREEN_PIN,GPIO.OUT)
GPIO.setup(RED_PIN,GPIO.OUT)
GPIO.setup(BLUE_PIN,GPIO.OUT)
dht = adafruit_dht.DHT22(board.D4)

try:
    while True:
        temperature = dht.temperature
        humidity = dht.humidity
        if(temperature<21):
            print("turn up the heat!")
            GPIO.output(GREEN_PIN, GPIO.HIGH)
            GPIO.output(RED_PIN, GPIO.HIGH)
            GPIO.output(BLUE_PIN, GPIO.HIGH)
        else:
            GPIO.output(GREEN_PIN, GPIO.LOW)
            GPIO.output(RED_PIN, GPIO.LOW)
            GPIO.output(BLUE_PIN, GPIO.LOW)
            print("Temp: {:.1f} *C \t Humidity: {}%".format(temperature, humidity))
         
except KeyboardInterrupt:
    print("all done")
    GPIO.cleanup()
    
##################################
